package Exсeption;
import java.io.*;
/*
 * В Java исключения (Exceptions) представляют собой способ обработки ошибок в программе.
 * Исключения возникают, когда в программе происходит неожиданное событие, например, ошибка при работе с файлом или делении на ноль.
 * Вместо того чтобы просто завершить работу программы, Java позволяет обработать эти ошибки и принять решение о том, что делать в такой ситуации.
 *
 * В Java исключения классифицируются на три типа:
 *
 * Проверяемые исключения (Checked Exceptions): это исключения, которые необходимо обработать явно в коде программы.
 * К ним относятся, например, IOException и SQLException.
 *
 * Непроверяемые исключения (Unchecked Exceptions): это исключения, которые не обязательно обрабатывать явно,
 * Но их все же можно обработать. К ним относятся, например, NullPointerException и ArrayIndexOutOfBoundsException.
 *
 * Ошибки (Errors): это исключения, которые обычно возникают в критических ситуациях,
 * Например, когда закончилась память. Обычно их не обрабатывают явно в коде программы.
 */
public class Main {

    public static void main(String[] args) throws Exception {
        // Unchecked exceptions //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//        int[] array = {1,2,3};
//        System.out.println(array[5]);
//
//        String s = null;
//        System.out.println(s.length());

        // Checked exception //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        File file1 = new File("test11.txt");

        // Блок try используется для написания кода, который может привести ошибкам или неожиданным ситуациям.
        try{
            FileInputStream fileInputStream1 = new FileInputStream(file1);
        }

        // Блок catch используется для обработки исключений, которые могут быть выброшены в блоке try.
        catch(FileNotFoundException e) {
            System.out.println("Файл был удален " + e);
        }

        // Блок finally используется для написания кода, который должен быть выполнен независимо от того, было ли выброшено исключение в блоке try или нет.
        finally {
            System.out.println("This finally block");
        }

        /*
         * Конструкторы классов FileInputStream и FileOutputStream могут выбрасывать исключение FileNotFoundException
         * Если файл который был указан в конструкторе потока не будет найден
         *
         * Методы read и write классов FileInputStream и FileOutputStream могут выбрасывать исключение IOException
         * Если поток из/в который производилось чтение/запись был прерван
         */

        /*
         * Иерархия наследования Throwable классов:
         *                                  Object
         *                                    |
         *                                Throwable
         *                               /         \
         *                        Exception        Error
         *                      /          \
         *      RuntimeException       IOException
         */


        /* Распространенные сабклассы IOException:
         *
         * FileNotFoundException - возникает, когда программа пытается открыть файл, который не существует.
         * EOFException - возникает, когда в процессе чтения потока данных достигнут конец файла или конец потока.
         * SocketException - возникает при ошибках сокета, например, когда соединение было прервано.
         * CharConversionException - возникает, когда происходит ошибка при конвертации символов из одной кодировки в другую.
         * InvalidClassException - возникает, когда сериализуемый класс не может быть восстановлен из потока, например, если класс был изменен после его сериализации.
         */

        /* Распространенные сабклассы RuntimeException:
         *
         * NullPointerException: возникает, когда переменная ссылается на null объект, и вы пытаетесь использовать его для вызова метода или доступа к его полям.
         * ArrayIndexOutOfBoundsException: возникает, когда вы пытаетесь получить доступ к индексу массива, который выходит за его границы.
         * IndexOutOfBoundsException: может возникнуть в любой коллекции, которая реализует интерфейс List, например ArrayList или LinkedList.
         * ArithmeticException: возникает, когда происходит ошибка в арифметической операции, например, деление на ноль.
         * IllegalArgumentException: возникает, когда метод получает некорректный аргумент.
         * IllegalStateException: метод вызывается в некорректном контексте, или он вызывается в неправильной последовательности.
         * ClassCastException: возникает, когда вы пытаетесь выполнить приведение типов между объектами, которые не совместимы.
         * UnsupportedOperationException: возникает, когда вызывается метод, который не поддерживается в данном контексте.
         * NumberFormatException: возникает, когда попытка преобразовать строку в число невозможна из-за того, что строка не имеет правильного числового формата.
         */

        /* Распространенные сабклассы Error:
         *
         * OutOfMemoryError: возникает, когда виртуальная машина Java не может выделить достаточно памяти для выполнения запрошенной операции.
         * StackOverflowError: возникает, когда стек вызовов переполняется из-за чрезмерного количества рекурсивных вызовов или бесконечной рекурсии.
         * ThreadDeath: возникает, когда поток принудительно останавливается.
         * InternalError: возникает, когда виртуальная машина Java обнаруживает внутреннюю ошибку.
         * ExceptionInInitiolizeError: возникает во время инициализации экземпляра класса или статического блока кода.
         * NoClassDefFoundError: класс, который был доступен во время компиляции, не может быть найден во время выполнения программы.
         */



    }
}
