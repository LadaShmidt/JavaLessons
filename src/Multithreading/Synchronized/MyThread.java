package Multithreading.Synchronized;
/*
    Data Race возникает, когда два или более потока имеют доступ к общему ресурсу
    и один из потоков изменяет этот ресурс, тогда как другой поток читает его,
    без использования синхронизации или других механизмов безопасности.

    Data Race может привести к неопределенным результатам,
    поскольку порядок выполнения операций может быть не определен,
    и результаты могут зависеть от того, какие операции выполнялись раньше или позже.

    Чтобы избежать Data Race, необходимо использовать механизмы синхронизации,
    такие как блокировки или мониторы, чтобы гарантировать,
    что только один поток может изменять общий ресурс в любой момент времени. Кроме того,
    можно использовать атомарные операции или volatile переменные, чтобы гарантировать,
    что значения переменных будут видны всем потокам во время их чтения и записи.

    В ключевое слово "synchronized" используется для обеспечения потокобезопасности при работе с общими ресурсами.
    Когда метод объявляется как synchronized, он может быть выполнен только одним потоком в любой момент времени,
    и другие потоки должны ждать, пока метод не будет освобожден.

    Применение synchronized методов гарантирует, что только один поток может выполнить этот метод в данный момент времени,
    что позволяет избежать Data Race и других проблем, связанных с многопоточностью.
*/
public class MyThread extends Thread {
    volatile static int counter = 0;
    public static synchronized void increment() {
        counter++;
    }
    @Override
    public void run() {
        for (int i = 1; i <= 1000; i++) {
            increment();
        }
    }
}
