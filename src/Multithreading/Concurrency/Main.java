package Multithreading.Concurrency;
/*
    Concurrency означает выполнение сразу нескольких задач.
    В зависимости от процессора компьютера concurrency может достигаться разными способами.

    Parallelism означает выполнение 2-х и более задач в одно и то же время, то есть параллельно.
    В компьютерах с многоядерным процессором concurrency может достигаться за счет parallelism.

    Синхронное и асинхронное программирование - это два различных подхода к организации выполнения задач в компьютерных программах.

    В синхронном программировании задачи выполняются последовательно, одна за другой, в определенном порядке.
    Это означает, что программа ожидает завершения каждой задачи, прежде чем начинать следующую.
    Если задача занимает много времени на выполнение, программа может заблокироваться и не отвечать на другие запросы, пока задача не будет завершена.

    В асинхронном программировании задачи выполняются одновременно и независимо друг от друга.
    Это позволяет программе работать более эффективно и отвечать на запросы быстрее.
    В асинхронной модели задачи запускаются в фоновом режиме, и программа может продолжать работать, не ожидая их завершения.
    Когда задача завершена, она сообщает программе о своем результате.

    Таким образом, основная разница между asynchronous и parallelism заключается в том,
    что в асинхронной программе операции не блокируют выполнение других операций,
    тогда как в параллельной программе задачи выполняются одновременно на разных процессорах или ядрах процессора.
    Оба концепта могут быть использованы вместе для достижения максимальной производительности в программе.

    Рассмотрим пример скачивания нескольких файлов из Интернета.
    В этом примере parallelism может быть использовано для ускорения процесса скачивания.
    Мы можем создать несколько потоков, которые будут одновременно скачивать разные файлы.
    Это позволит ускорить процесс и сократить время, затраченное на скачивание всех файлов.

    С другой стороны, asynchronous может быть использовано,
    если у нас есть несколько задач, которые не зависят друг от друга и могут быть выполнены независимо.
    Например, мы можем иметь несколько запросов к базе данных, чтобы получить данные, необходимые для отображения на странице.
    Вместо того, чтобы делать запросы последовательно, мы можем сделать их асинхронными, чтобы каждый запрос начал выполнение,
    даже если предыдущий запрос еще не завершился. Таким образом, мы можем ускорить процесс получения данных, поскольку каждый
    запрос может выполняться параллельно, и программа не ждет завершения предыдущего запроса, прежде чем начать следующий.

    Asynchronous и parallelism являются частными случаями concurrency (конкурентности),
    которая является более общим понятием в программировании.
*/
public class Main {
}
